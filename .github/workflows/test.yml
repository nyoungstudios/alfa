name: Test

# Run only one unique workflow at a time on a pr
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

on:
  push:
  pull_request:
    paths:
      - ".github/workflows/test.yml"
      - "bin/**"
      - "functions/**"
      - "lib/**"
      - "tests/**"
      - "pubspec.yaml"
  workflow_dispatch:

jobs:
  # build-executables:
  #   name: Build executables
  #   uses: ./.github/workflows/build_alfa_cli.yml

  # test-functions-schema:
  #   name: Test functions schema
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15

  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: dart-lang/setup-dart@v1.3
  #       with:
  #         sdk: stable

  #     - name: Install dependencies
  #       run: dart pub get

  #     - name: Run tests
  #       run: dart test tests/test_functions.dart

  # find-functions:
  #   name: Find functions that changed
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   outputs:
  #     matrix: ${{ env.matrix }}
  #     length: ${{ env.length }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: dart-lang/setup-dart@v1.3
  #       with:
  #         sdk: stable

  #     - name: Install dependencies
  #       run: dart pub get

  #     - name: Get available functions
  #       run: dart run tests/get_functions.dart -o /tmp/matrix.json

  #     - name: Print matrix
  #       run: jq . /tmp/matrix.json

  #     - name: Writes yaml filters
  #       run: |
  #         filters="$(jq '(.include[].sourcePath as $sourcePath | $sourcePath | sub("^functions/"; "") | sub("/$"; "") + ": [ " + $sourcePath + "** ]")' -r /tmp/matrix.json)"
  #         echo "$filters" > /tmp/filters.yml

  #     - uses: dorny/paths-filter@v3
  #       id: changes
  #       with:
  #         filters: /tmp/filters.yml

  #     - name: Output changes to json
  #       run: |
  #         echo '${{ steps.changes.outputs.changes }}' > /tmp/changes.json
  #         jq . /tmp/changes.json

  #     - name: Create filtered matrix
  #       run: |
  #         # creates matrix from changes
  #         jq -c '. | map(. | {"name": .}) | {"include": .}' /tmp/changes.json > /tmp/filtered_matrix.json

  #         # prints json file for debugging
  #         jq . /tmp/filtered_matrix.json

  #         # sets matrix output
  #         echo "matrix=$(cat /tmp/filtered_matrix.json)" >> $GITHUB_ENV
  #         echo "length=$(jq 'length' /tmp/changes.json)" >> $GITHUB_ENV

  test-installing-functions:
    name: Test installing functions
    # runs-on: ubuntu-22.04
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    # needs:
    #   - build-executables
    #   - test-functions-schema
    #   - find-functions
    # if: ${{ needs.find-functions.outputs.length != '0' }}
    strategy:
      fail-fast: false
      # matrix: ${{ fromJson(needs.find-functions.outputs.matrix) }}
      matrix:
        os: [ubuntu-22.04, macos-14, macos-13]

    steps:
      - uses: actions/checkout@v4

      - name: Set sudo access properly on macos
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          echo "runner ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers.d/runner

      # - uses: actions/download-artifact@v4
      #   with:
      #     merge-multiple: true

      - name: Testing
        run: |
          ls -alth
          which sudo
          whoami
          sudo echo hi

      # - name: Set alfa permissions
      #   run: chmod +x alfa_*

      - name: Testing
        run: |
          ./test_sudo.sh
          # ./install.sh -h

      # - name: Testing
      #   run: |
      #     echo ${{ matrix.name }} > test_install_list.txt
      #     # ./install.sh -e -c tests/resources/functions/${{ matrix.name }}/test_config.toml -f test_install_list.txt
